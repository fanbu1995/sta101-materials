library(acs);
install.packages("acs")
library(acs);
api.key.install('11b9ccf4490949cd47f7bdfb9de83c8048cab0cb');
state_choropleth_acs("B01003", endyear=2012, span=5)
library(choroplethr)
install.packages("choroplethr")
library(choroplethr)
state_choropleth_acs("B01003", endyear=2012, span=5)
install.packages("choroplethrMaps")
state_choropleth_acs("B01003", endyear=2012, span=5)
state_choropleth_acs("B01003", endyear=2012, span=5)
state_choropleth_acs("B01003", endyear=2012, span=5)
draws <- 1000 # N
simCount <- 100000 # number of simulations
set.seed(111)
samp <- matrix(sample(set, size = draws*simCount, replace = TRUE), nrow=simCount)
scoreN1000 = NULL; historyMeanN1000 = NULL; historySDN1000 = NULL
for (i in 1:simCount){
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
results <- cumsum(samp[i,1:indexMax]) # return the vector of results up until index TRUE
scoreN1000 <- c(scoreN1000, results[indexMax] - draws) # return score
historyMeanN1000[i] <- mean(scoreN1000)
historySDN1000[i] <- sd(scoreN1000)
}
## Mean traceplot, default precision, more precision
qplot(x=1:simCount, y=historyMeanN1000, geom="line", main="Traceplot for Mean",
xlab="Simulations", ylab="Score Mean") # traceplot converges to ~25.
mean(scoreN1000) # average score (default precision)
sumScore <- mpfr(sum(scoreN1000),53) # get more precision (in bits)
sumScore/length(scoreN1000) # average score (more precision)
## SD traceplot, default precision, more precision
qplot(x=1:simCount, y=historySDN1000, geom="line", main="Traceplot for SD",
xlab="Simulations", ylab="Score SD")
sd(scoreN1000)
library(devtools) # Give source_url().
library(dplyr)
require(Rmpfr)
set <- c(1, 2, 4, 8, 16, 32, 64) # the sample space
draws <- 21 # N
simCount <- 100000 # number of simulations
set.seed(111)
samp <- matrix(sample(set, size = draws*simCount, replace = TRUE), nrow=simCount)
score = NULL; historyMean = NULL; historySD = NULL
for (i in 1:simCount){
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
results <- cumsum(samp[i,1:indexMax]) # return the vector of results up until index TRUE
score <- c(score, results[indexMax] - draws) # return score
historyMean[i] <- mean(score)
historySD[i] <- sd(score)
}
library(ggplot2)
## Mean traceplot, default precision, more precision
qplot(x=1:simCount, y=historyMean, geom="line", main="Traceplot for Mean",
xlab="Simulations", ylab="Score Mean") # traceplot converges to ~25.
mean(score) # average score (default precision)
sumScore <- mpfr(sum(score),53) # get more precision (in bits)
sumScore/length(score) # average score (more precision)
## SD traceplot, default precision, more precision
qplot(x=1:simCount, y=historySD, geom="line", main="Traceplot for SD",
xlab="Simulations", ylab="Score SD")
sd(score)
samp <- matrix(sample(set, s=1000, r=T), nrow=100)
samp
answer1 <- samp[which(apply(samp,1,function(x)sum(x)>30)),1]
answer1
sumScore/length(score) # average score (more precision)
sd(score)
?sd
draws <- 1000 # N
simCount <- 100000 # number of simulations
set.seed(111)
samp <- matrix(sample(set, size = draws*simCount, replace = TRUE), nrow=simCount)
scoreN1000 = NULL; historyMeanN1000 = NULL; historySDN1000 = NULL
for (i in 1:simCount){
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
results <- cumsum(samp[i,1:indexMax]) # return the vector of results up until index TRUE
scoreN1000 <- c(scoreN1000, results[indexMax] - draws) # return score
historyMeanN1000[i] <- mean(scoreN1000)
historySDN1000[i] <- sd(scoreN1000)
}
## Mean traceplot, default precision, more precision
qplot(x=1:simCount, y=historyMeanN1000, geom="line", main="Traceplot for Mean",
xlab="Simulations", ylab="Score Mean") # traceplot converges to ~25.
mean(scoreN1000) # average score (default precision)
sumScore <- mpfr(sum(scoreN1000),53) # get more precision (in bits)
sumScore/length(scoreN1000) # average score (more precision)
## SD traceplot, default precision, more precision
qplot(x=1:simCount, y=historySDN1000, geom="line", main="Traceplot for SD",
xlab="Simulations", ylab="Score SD")
sd(scoreN1000)
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
i=5
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
results
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
set <- c(1, 2, 4, 8, 16, 32, 64) # the sample space
draws <- 21 # N
simCount <- 100000 # number of simulations
set.seed(111)
samp <- matrix(sample(set, size = draws*simCount, replace = TRUE), nrow=simCount)
score = NULL; historyMean = NULL; historySD = NULL
### Test
i=5
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[1:indexMax,]
samp[,1:indexMax]
samp[i,1:indexMax]
8 %in% samp[i,1:indexMax]
samp[i,1:indexMax]
i=4
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
i=3
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[i,1:indexMax]
i=2
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[i,1:indexMax]
i=1
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[i,1:indexMax]
i=5
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[i,1:indexMax]
i=6
results <- cumsum(samp[i,])>=draws; results # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")); indexMax # find index of first element in vector == TRUE
samp[i,1:indexMax]
8 %in% samp[i,1:indexMax]
for (i in 1:simCount){
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
results <- cumsum(samp[i,1:indexMax]) # return the vector of results up until index TRUE
if (8 %in% samp[i,1:indexMax]){
count8 = count8+1
}
score <- c(score, results[indexMax] - draws) # return score
historyMean[i] <- mean(score)
historySD[i] <- sd(score)
}
score = NULL; historyMean = NULL; historySD = NULL; count8 = 0
for (i in 1:simCount){
results <- cumsum(samp[i,])>=draws # return vector of booleans checking if >=(N=21)
indexMax <- min(which(results == "TRUE")) # find index of first element in vector == TRUE
results <- cumsum(samp[i,1:indexMax]) # return the vector of results up until index TRUE
if (8 %in% samp[i,1:indexMax]){
count8 = count8+1
}
score <- c(score, results[indexMax] - draws) # return score
historyMean[i] <- mean(score)
historySD[i] <- sd(score)
}
count8
